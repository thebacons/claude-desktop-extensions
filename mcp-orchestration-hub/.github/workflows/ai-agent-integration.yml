name: AI Agent Coordination & Integration

on:
  push:
    branches: ['main', 'feature/*']
  pull_request:
    branches: ['main']
  issue:
    types: [opened, labeled]

env:
  NODE_VERSION: '18'
  MAX_AGENTS: 7

jobs:
  # Job 1: Analyze and assign tasks to AI agents
  task-assignment:
    name: AI Agent Task Assignment
    runs-on: ubuntu-latest
    if: github.event_name == 'issue' && contains(github.event.issue.labels.*.name, 'ai-agent-task')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Analyze task requirements
        id: analyze
        run: |
          node tools/ai-agent-coordinator.js analyze \
            --issue-number="${{ github.event.issue.number }}" \
            --issue-body="${{ github.event.issue.body }}"
            
      - name: Assign optimal agent
        id: assign
        run: |
          node tools/ai-agent-coordinator.js assign \
            --task-type="${{ steps.analyze.outputs.task-type }}" \
            --complexity="${{ steps.analyze.outputs.complexity }}" \
            --dependencies="${{ steps.analyze.outputs.dependencies }}"
            
      - name: Create feature branch
        if: steps.assign.outputs.agent-id != ''
        run: |
          git checkout -b feature/${{ steps.assign.outputs.branch-name }}
          git push origin feature/${{ steps.assign.outputs.branch-name }}
          
      - name: Update issue with agent assignment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ¤– **Agent Assignment Complete**
              
              **Assigned Agent**: ${{ steps.assign.outputs.agent-name }}
              **Agent ID**: ${{ steps.assign.outputs.agent-id }}
              **Branch**: \`feature/${{ steps.assign.outputs.branch-name }}\`
              **Estimated Completion**: ${{ steps.assign.outputs.estimated-completion }}
              
              **Dependencies**: ${{ steps.assign.outputs.dependencies }}
              **Complexity**: ${{ steps.assign.outputs.complexity }}
              
              Agent will begin work shortly. Progress will be tracked automatically.`
            })

  # Job 2: Feature branch testing (per agent)
  feature-testing:
    name: Agent Feature Testing
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/feature/')
    
    strategy:
      matrix:
        test-type: [unit, integration, performance]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Extract agent info from branch
        id: agent-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          AGENT_ID=$(node tools/ai-agent-coordinator.js get-agent-id --branch="$BRANCH_NAME")
          echo "agent-id=$AGENT_ID" >> $GITHUB_OUTPUT
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Run agent-specific tests
        run: |
          npm run test-agent -- --agent-id=${{ steps.agent-info.outputs.agent-id }} --type=${{ matrix.test-type }}
          
      - name: Generate test report
        if: always()
        run: |
          node tools/generate-test-report.js \
            --agent-id=${{ steps.agent-info.outputs.agent-id }} \
            --test-type=${{ matrix.test-type }} \
            --branch=${{ steps.agent-info.outputs.branch-name }}
            
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-agent-${{ steps.agent-info.outputs.agent-id }}-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
            performance-reports/

  # Job 3: Cross-agent integration testing
  integration-testing:
    name: Cross-Agent Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [feature-testing]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Detect affected agents
        id: affected-agents
        run: |
          node tools/ai-agent-coordinator.js detect-affected-agents \
            --base-ref="${{ github.base_ref }}" \
            --head-ref="${{ github.head_ref }}"
            
      - name: Run integration compatibility tests
        run: |
          node tools/integration-tester.js compatibility \
            --agents="${{ steps.affected-agents.outputs.agent-list }}"
            
      - name: Test agent communication protocols
        run: |
          npm run test:integration -- --agents="${{ steps.affected-agents.outputs.agent-list }}"
          
      - name: Performance regression testing
        run: |
          npm run benchmark -- --compare-with=main --agents="${{ steps.affected-agents.outputs.agent-list }}"
          
      - name: Generate integration report
        if: always()
        run: |
          node tools/generate-integration-report.js \
            --pr-number="${{ github.event.number }}" \
            --affected-agents="${{ steps.affected-agents.outputs.agent-list }}"

  # Job 4: Agent status monitoring
  agent-monitoring:
    name: Agent Status Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Collect agent status
        id: status
        run: |
          node tools/ai-agent-coordinator.js status --all-agents
          
      - name: Update project dashboard
        run: |
          node tools/update-dashboard.js \
            --agent-status="${{ steps.status.outputs.status-json }}"
            
      - name: Check for agent coordination issues
        run: |
          node tools/ai-agent-coordinator.js health-check
          
      - name: Generate daily status report
        if: github.event_name == 'schedule'
        run: |
          node tools/generate-status-report.js --daily

  # Job 5: Deployment coordination
  deployment:
    name: Coordinated Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [integration-testing]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Verify all agents ready
        id: readiness
        run: |
          node tools/ai-agent-coordinator.js verify-deployment-readiness
          
      - name: Build production artifacts
        if: steps.readiness.outputs.ready == 'true'
        run: |
          npm run build
          
      - name: Run final integration tests
        if: steps.readiness.outputs.ready == 'true'
        run: |
          npm run test:e2e
          
      - name: Deploy to staging
        if: steps.readiness.outputs.ready == 'true'
        run: |
          npm run deploy:staging
          
      - name: Notify agents of deployment
        if: always()
        run: |
          node tools/ai-agent-coordinator.js notify-deployment \
            --status="${{ job.status }}" \
            --environment="staging"

# Schedule daily agent coordination
on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9 AM UTC

# Custom workflow for agent coordination
jobs:
  daily-coordination:
    name: Daily Agent Coordination
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Daily agent sync
        run: |
          node tools/ai-agent-coordinator.js daily-sync
          
      - name: Generate progress report
        run: |
          node tools/generate-progress-report.js --daily
          
      - name: Update project metrics
        run: |
          node tools/update-project-metrics.js
